name: Linux build qt6

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - 'updater/**'
      - 'windows/**'
      - 'macos-build/**'
      - '!.github/workflows/linux qt6.yml'

  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      QT_PREFIX: "/home/runner/work/ui_qml/ui_qml/qt_install/"
      PREFIX_LIB: "/home/runner/work/ui_qml/ui_qml/"

    steps:
      - name: Checkout writernote-qt
        uses: actions/checkout@v2
        with:
          repository: giacomogroppi/writernote-qt

      - name: Clone
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Run a one-line script
        run: |
          sudo apt update
          sudo apt -y install libzip-dev
          sudo apt -y install libfreetype-dev libfontconfig1-dev 
          sudo apt -y install libtiff-dev libnss3-dev libcairo2-dev
          sudo apt -y install libboost-all-dev libopenjp2-7-dev
          sudo snap install cmake --classic
          sudo apt -y install ninja-build

          sudo apt install -y libdbus-1-dev libegl-dev libfontconfig1-dev libfreetype-dev libglib2.0-dev libglx-dev libgtk-3-dev libharfbuzz-dev libice-dev
          sudo apt install -y libicu-dev libopengl-dev libpcre2-dev libpng-dev libsm-dev libssl-dev libwayland-dev
          sudo apt install -y libx11-dev libx11-xcb-dev libxcb1-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev 
          sudo apt install -y libxcb-render0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-shm0-dev
          sudo apt install -y libxcb-sync-dev libxcb-util-dev libxcb-xfixes0-dev libxcb-xkb-dev libxcursor-dev libxkbcommon-dev libxkbcommon-x11-dev zlib1g-dev
          sudo apt install -y valgrind libzip-dev

      - name: Qt 6 cache.
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ env.PREFIX_LIB }}/qt-cache
          key: ${{ runner.OS }}-qt6-${{ env.CACHE_KEY }}-qtmulmedia-0

      - name: Use cached Qt 6.5.0
        if: steps.cache-qt.outputs.cache-hit == 'true'
        run: |
          cd $PREFIX_LIB
          sudo mv qt-cache $QT_PREFIX

          sudo find $QT_PREFIX -name "Qt6Config.cmake"

      - name: Build Qt 6.5.0
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          git clone -b v6.5.0 https://code.qt.io/qt/qt5.git qt_6_5_0
          cd qt_6_5_0
          perl init-repository --module-subset=qtbase,qtsvg,qtmultimedia,qtshadertools,qtdeclarative
          
          mkdir -p $QT_PREFIX

          cmake . \
            -DCMAKE_INSTALL_PREFIX=$QT_PREFIX \
            -GNinja

          cmake --build .
          cmake --install .

          cp -r $QT_PREFIX $PREFIX_LIB/qt-cache

      - name: Download writernote
        run: |
          mkdir src/model
          git clone https://github.com/giacomogroppi/writernote-qt
          mv writernote-qt/src/* src/model/

      - name: Writernote compile [test]
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_PREFIX_PATH=$QT_PREFIX/lib/cmake \
            -DCMAKE_BUILD_TYPE=Debug \
            -DDEBUG_CORE=ON \
            -GNinja
            
          ninja
      - name: Run ctest
        run: |
          cd build
          ctest

      - name: Run ctest with valgrind
        run: |
          cd build
          
          paths=$(find "$(pwd)" -maxdepth 1  -type f -name "test_*")

          for path in $paths
          do
            valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes "$path"
            # Esegui le operazioni desiderate sui percorsi
          done

          

